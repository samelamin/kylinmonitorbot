from abc import ABC
from datetime import datetime
from math import ceil

from services.lib.datetime import format_time_ago
from services.lib.money import format_percent, asset_name_cut_chain, pretty_money, short_address, short_money, \
    short_asset_name, calc_percent_change, adaptive_round_to_str, pretty_dollar, emoji_for_percent_change
from services.lib.texts import progressbar, kbd, link, pre, code, bold, x_ses, ital, BoardMessage
from services.models.cap_info import ThorInfo
from services.models.pool_info import PoolInfo
from services.models.price import RuneFairPrice, PriceReport
from services.models.queue import QueueInfo
from services.models.tx import StakeTx, StakePoolStats

RAIDO_GLYPH = '·ö±'
CREATOR_TG = '@account1242'


class BaseLocalization(ABC):  # == English
    # ----- WELCOME ------

    START_ME = 'https://telegram.me/kylin_monitoring_bot?start=1'

    @staticmethod
    def _cap_progress_bar(info: ThorInfo):
        return f'{progressbar(info.stacked, info.cap, 10)} ({format_percent(info.stacked, info.cap)})\n'

    # ---- WELCOME ----
    def help_message(self):
        return (
            f"Hello fellow Kylian! This bot is here to help you get a Kylin Avatar! \n"
            f"\n"
            f"ü§ó Click on the button below to get started\n"
            f"\n"
            f"Go forth Kylians! ü•≥"
        )

    def welcome_message(self, info: ThorInfo):
        return (
            f"Hello! This bot is here to help you get a Kylian Avatar! \n"
            f"\n"
            f"ü§ó Click on the button below to get started\n"
            f"\n"
            f"Go forth Kylians! ü•≥"

        )

    BUTTON_RUS = '–†—É—Å—Å–∫–∏–π'
    BUTTON_ENG = 'English'

    kylin_LINK = 'https://kylin.network/'

    R = 'Rune'

    def lang_help(self):
        return (
            f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please select a language',
            kbd([self.BUTTON_RUS, self.BUTTON_ENG], one_time=True)
        )

    def unknown_command(self):
        return (
            "üôÑ Sorry, I didn't understand that command.\n"
            "Use /help to see available commands."
        )

    # ----- MAIN MENU ------

    BUTTON_MM_MY_ADDRESS = 'üè¶ Manage my address'
    BUTTON_MM_METRICS = 'üìê Metrics'
    BUTTON_MM_SETTINGS = f'‚öôÔ∏è Settings'
    BUTTON_MM_MAKE_AVATAR = f'ü¶π‚ÄçGive me aÔ∏èÔ∏è Kylin Avatar!'

    def kbd_main_menu(self):
        # return kbd([
        #     [self.BUTTON_MM_MY_ADDRESS, self.BUTTON_MM_METRICS],
        #     [self.BUTTON_MM_MAKE_AVATAR, self.BUTTON_MM_SETTINGS]
        # ])
        return kbd([
            [self.BUTTON_MM_MAKE_AVATAR]
        ])

    # ------- STAKE INFO MENU -------

    BUTTON_SM_ADD_ADDRESS = '‚ûï Add an address'
    BUTTON_BACK = 'üîô Back'
    BUTTON_SM_BACK_TO_LIST = 'üîô Back to list'
    BUTTON_SM_BACK_MM = 'üîô Main menu'

    BUTTON_SM_SUMMARY = 'üí≤ Summary'

    BUTTON_VIEW_RUNESTAKEINFO = 'üåé View it on runestake.info'
    BUTTON_VIEW_VALUE_ON = 'Show value: ON'
    BUTTON_VIEW_VALUE_OFF = 'Show value: OFF'
    BUTTON_REMOVE_THIS_ADDRESS = '‚ùå Remove this address'

    TEXT_NO_ADDRESSES = "üîÜ You have not added any addresses yet. Send me one."
    TEXT_YOUR_ADDRESSES = 'üîÜ You added addresses:'
    TEXT_INVALID_ADDRESS = code('‚õîÔ∏è Invalid address!')
    TEXT_SELECT_ADDRESS_ABOVE = 'Select one from above. ‚òùÔ∏è '
    TEXT_SELECT_ADDRESS_SEND_ME = 'If you want to add one more, please send me it. üëá'
    TEXT_LP_NO_POOLS_FOR_THIS_ADDRESS = "üì™ <b>This address doesn't participate in any liquidity pools.</b> " \
                                        "Please choose another one or add new."
    TEXT_LP_IMG_CAPTION = f'Generated by {link(START_ME, "@kylin_monitoring_bot")}'

    LP_PIC_POOL = 'POOL'
    LP_PIC_RUNE = 'RUNE'
    LP_PIC_ADDED = 'Added'
    LP_PIC_WITHDRAWN = 'Withdrawn'
    LP_PIC_REDEEM = 'Redeemable'
    LP_PIC_GAIN_LOSS = 'Gain / Loss'
    LP_PIC_IN_USD = 'in USD'
    LP_PIC_R_RUNE = f'{RAIDO_GLYPH}une'
    LP_PIC_ADDED_VALUE = 'Added value'
    LP_PIC_WITHDRAWN_VALUE = 'Withdrawn value'
    LP_PIC_CURRENT_VALUE = 'Current value'
    LP_PIC_PRICE_CHANGE = 'Price change'
    LP_PIC_PRICE_CHANGE_2 = 'since the first addition'
    LP_PIC_LP_VS_HOLD = 'LP vs HOLD'
    LP_PIC_LP_APY = 'LP APY'
    LP_PIC_EARLY = 'Early...'
    LP_PIC_FOOTER = "Powered by Bigboss' runestake.info"

    LP_PIC_SUMMARY_HEADER = 'Liquidity pools summary'
    LP_PIC_SUMMARY_ADDED_VALUE = 'Added value'
    LP_PIC_SUMMARY_WITHDRAWN_VALUE = 'Withdrawn'
    LP_PIC_SUMMARY_CURRENT_VALUE = 'Current value'
    LP_PIC_SUMMARY_TOTAL_GAIN_LOSS = 'Total gain/loss'
    LP_PIC_SUMMARY_TOTAL_GAIN_LOSS_PERCENT = 'Total gain/loss %'
    LP_PIC_SUMMARY_AS_IF_IN_RUNE = f'Total as {RAIDO_GLYPH}'
    LP_PIC_SUMMARY_AS_IF_IN_USD = 'Total as $'
    LP_PIC_SUMMARY_TOTAL_LP_VS_HOLD = 'Total LP vs Hold $'

    def pic_stake_days(self, total_days, first_stake_ts):
        start_date = datetime.fromtimestamp(first_stake_ts).strftime('%d.%m.%Y')
        day_count_str = 'days' if total_days >= 2 else 'day'
        return f'{ceil(total_days)} {day_count_str} ({start_date})'

    def text_stake_loading_pools(self, address):
        return f'‚è≥ <b>Please wait.</b>\n' \
               f'Loading pools information for {pre(address)}...'

    def text_stake_provides_liq_to_pools(self, address, pools):
        pools = pre(', '.join(pools))
        thor_tx = link(self.thor_explore_address(address), 'viewblock.io')
        bnb_tx = link(self.binance_explore_address(address), 'explorer.binance.org')
        return f'üõ≥Ô∏è {pre(address)}\nprovides liquidity to the following pools:\n' \
               f'{pools}.\n\n' \
               f"üîç Explorers: {thor_tx}; {bnb_tx}.\n\n" \
               f'üëá Click on the button to get a detailed card.'

    def text_stake_today(self):
        today = datetime.now().strftime('%d.%m.%Y')
        return f'Today is {today}'

    # ------- CAP -------

    def notification_text_cap_change(self, old: ThorInfo, new: ThorInfo):
        verb = "has been increased" if old.cap < new.cap else "has been decreased"
        call = "Come on, add more liquidity!\n" if new.cap > old.cap else ''
        message = (
            f'<b>Pool cap {verb} from {pretty_money(old.cap)} to {pretty_money(new.cap)}!</b>\n'
            f'Currently <b>{pretty_money(new.stacked)}</b> {self.R} are in the liquidity pools.\n'
            f"{self._cap_progress_bar(new)}"
            f'The price of {self.R} in the pool is <code>{new.price:.3f} BUSD</code>.\n'
            f'{call}'
            f'https://chaosnet.bepswap.com/'
        )
        return message

    # ------ PRICE -------

    PRICE_GRAPH_TITLE = f'Rune price, USD'
    PRICE_GRAPH_LEGEND_DET_PRICE = f'Deterministic {RAIDO_GLYPH} price'
    PRICE_GRAPH_LEGEND_ACTUAL_PRICE = f'Market {RAIDO_GLYPH} price'

    def price_message(self, info: ThorInfo, fair_price: RuneFairPrice):
        return (
            f"Last real price of {self.R} is <code>${info.price:.3f}</code>.\n"
            f"Deterministic price of {self.R} is <code>${fair_price.fair_price:.3f}</code>."
        )

    # ------- NOTIFY STAKES -------

    @staticmethod
    def thor_explore_address(address):
        return f'https://viewblock.io/kylin/address/{address}'

    @staticmethod
    def binance_explore_address(address):
        return f'https://explorer.binance.org/address/{address}'

    def notification_text_large_tx(self, tx: StakeTx, dollar_per_rune: float, pool: StakePoolStats,
                                   pool_info: PoolInfo):
        msg = ''
        if tx.type == 'stake':
            msg += f'üê≥ <b>Whale added liquidity</b> üü¢\n'
        elif tx.type == 'unstake':
            msg += f'üê≥ <b>Whale removed liquidity</b> üî¥\n'

        total_usd_volume = tx.full_rune * dollar_per_rune if dollar_per_rune != 0 else 0.0
        pool_depth_usd = pool_info.usd_depth(dollar_per_rune)
        thor_tx = link(self.thor_explore_address(tx.address), short_address(tx.address))
        bnb_tx = link(self.binance_explore_address(tx.address), short_address(tx.address))

        rp, ap = tx.symmetry_rune_vs_asset()

        rune_side_usd = tx.rune_amount * dollar_per_rune
        rune_side_usd_short = short_money(rune_side_usd)
        asset_side_usd_short = short_money(total_usd_volume - rune_side_usd)
        percent_of_pool = pool_info.percent_share(tx.full_rune)

        msg += (
            f"<b>{pretty_money(tx.rune_amount)} {self.R}</b> ({rp:.0f}% = {rune_side_usd_short}) ‚ÜîÔ∏è "
            f"<b>{pretty_money(tx.asset_amount)} {short_asset_name(tx.pool)}</b> ({ap:.0f}% = {asset_side_usd_short})\n"
            f"Total: <code>${pretty_money(total_usd_volume)}</code> ({percent_of_pool:.2f}% of the whole pool).\n"
            f"Pool depth is <b>${pretty_money(pool_depth_usd)}</b> now.\n"
            f"Thor explorer: {thor_tx} / Binance explorer: {bnb_tx}."
        )

        return msg

    # ------- QUEUE -------

    def notification_text_queue_update(self, item_type, step, value):
        if step == 0:
            return f"‚ò∫Ô∏è Queue {code(item_type)} is empty again!"
        else:
            return (
                f"ü§¨ <b>Attention!</b> Queue {code(item_type)} has {value} transactions!\n"
                f"{code(item_type)} transactions may be delayed."
            )

    # ------- PRICE -------

    DET_PRICE_HELP_PAGE = 'https://docs.kylin.org/how-it-works/incentive-pendulum'

    def notification_text_price_update(self, p: PriceReport, ath=False):
        title = bold('Price update') if not ath else bold('üöÄ A new all-time high has been achieved!')

        c_gecko_url = 'https://www.coingecko.com/en/coins/kylin'
        c_gecko_link = link(c_gecko_url, 'RUNE')

        message = f"{title} | {c_gecko_link}\n\n"
        price = p.fair_price.real_rune_price

        pr_text = f"${price:.3f}"
        btc_price = f"‚Çø {p.btc_real_rune_price:.8f}"
        message += f"<b>RUNE</b> price is {code(pr_text)} ({btc_price}) now.\n"

        last_ath = p.last_ath
        if last_ath is not None and ath:
            last_ath_pr = f'{last_ath.ath_price:.2f}'
            message += f"Last ATH was ${pre(last_ath_pr)} ({format_time_ago(last_ath.ath_date)}).\n"

        time_combos = zip(
            ('1h', '24h', '7d'),
            (p.price_1h, p.price_24h, p.price_7d)
        )
        for title, old_price in time_combos:
            if old_price:
                pc = calc_percent_change(old_price, price)
                message += pre(f"{title.rjust(4)}:{adaptive_round_to_str(pc, True).rjust(8)} % "
                               f"{emoji_for_percent_change(pc).ljust(4).rjust(6)}") + "\n"

        fp = p.fair_price
        if fp.rank >= 1:
            message += f"Coin market cap is {bold(pretty_dollar(fp.market_cap))} (#{bold(fp.rank)})\n"

        if fp.tlv_usd >= 1:
            det_link = link(self.DET_PRICE_HELP_PAGE, 'deterministic price')
            message += (f"TVL of non-RUNE assets: ${pre(pretty_money(fp.tlv_usd))}\n"
                        f"So {det_link} of RUNE is {code(pretty_money(fp.fair_price, prefix='$'))}\n"
                        f"Speculative multiplier is {pre(x_ses(fp.fair_price, price))}\n")

        return message.rstrip()

    # ------- POOL CHURN -------

    @staticmethod
    def pool_link(pool_name):
        return f'https://chaosnet.bepswap.com/pool/{asset_name_cut_chain(pool_name)}'

    def notification_text_pool_churn(self, added_pools, removed_pools, changed_status_pools):
        message = bold('üèä Liquidity pool churn!') + '\n\n'

        def pool_text(pool_name, status, to_status=None):
            t = link(self.pool_link(pool_name), pool_name)
            extra = '' if to_status is None else f' ‚Üí {ital(to_status)}'
            return f'  ‚Ä¢ {t} ({ital(status)}{extra})'

        if added_pools:
            message += '‚úÖ Pools added:\n' + '\n'.join([pool_text(*a) for a in added_pools]) + '\n\n'
        if removed_pools:
            message += '‚ùå Pools removed:\n' + '\n'.join([pool_text(*a) for a in removed_pools]) + '\n\n'
        if changed_status_pools:
            message += 'üîÑ Pools changed:\n' + '\n'.join([pool_text(*a) for a in changed_status_pools]) + '\n\n'

        return message.rstrip()

    # -------- SETTINGS --------

    BUTTON_SET_LANGUAGE = 'üåê Language'
    TEXT_SETTING_INTRO = '<b>Settings</b>\nWhat would you like to tune?'

    # -------- METRICS ----------

    BUTTON_METR_CAP = 'üìä Liquidity cap'
    BUTTON_METR_PRICE = f'üí≤ {R} price info'
    BUTTON_METR_QUEUE = f'üë• Queue'

    TEXT_METRICS_INTRO = 'What metrics would you like to know?'

    TEXT_QUEUE_PLOT_TITLE = 'kylin Queue'

    def cap_message(self, info: ThorInfo):
        return (
            f"Hello! <b>{pretty_money(info.stacked)} {self.R}</b> of "
            f"<b>{pretty_money(info.cap)} {self.R}</b> pooled.\n"
            f"{self._cap_progress_bar(info)}"
            f"The {bold(self.R)} price is <code>${info.price:.3f}</code> now.\n"
        )

    def queue_message(self, queue_info: QueueInfo):
        return (
                   f"<b>Queue info:</b>\n"
                   f"- <b>Outbound</b>: {code(queue_info.outbound)} txs {self.queue_to_smile(queue_info.outbound)}\n"
                   f"- <b>Swap</b>: {code(queue_info.swap)} txs {self.queue_to_smile(queue_info.swap)}\n"
               ) + (
                   f"If there are many transactions in the queue, your operations may take much longer than usual."
                   if queue_info.is_full else ''
               )

    @staticmethod
    def queue_to_smile(n):
        if n <= 3:
            return 'üü¢'
        elif n <= 20:
            return 'üü°'
        elif n <= 50:
            return 'üî¥'
        elif n <= 100:
            return 'ü§¨!!'

    TEXT_PRICE_INFO_ASK_DURATION = 'For what period of time do you want to get a graph?'

    BUTTON_1_HOUR = '1 hour'
    BUTTON_24_HOURS = '24 hours'
    BUTTON_1_WEEK = '1 week'
    BUTTON_30_DAYS = '30 days'

    # ------- AVATAR -------

    TEXT_AVA_WELCOME = 'üñºÔ∏è Drop me a square picture and I make you kylin-styled avatar with a gradient frame.'

    TEXT_AVA_ERR_INVALID = '‚ö†Ô∏è Your picture has invalid format!'
    TEXT_AVA_ERR_SQUARE = 'üñºÔ∏è Your picture is not square!'
    TEXT_AVA_ERR_NO_PIC = '‚ö†Ô∏è You have no user pic...'
    TEXT_AVA_READY = 'ü•≥ <b>Your kylin avatar is ready!</b> Download this image and set it as a profile picture' \
                     ' at Telegram and other social networks.'

    BUTTON_AVA_FROM_MY_USERPIC = 'üòÄ From my userpic'

