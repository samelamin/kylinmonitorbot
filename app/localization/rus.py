from datetime import datetime
from math import ceil

from localization.base import BaseLocalization, RAIDO_GLYPH, CREATOR_TG
from services.lib.datetime import format_time_ago
from services.lib.money import pretty_dollar, pretty_money, short_address, adaptive_round_to_str, calc_percent_change, \
    emoji_for_percent_change, short_asset_name
from services.lib.texts import bold, link, code, ital, pre, x_ses, kbd
from services.models.cap_info import ThorInfo
from services.models.pool_info import PoolInfo
from services.models.price import RuneFairPrice, PriceReport
from services.models.queue import QueueInfo
from services.models.tx import StakeTx, StakePoolStats


class RussianLocalization(BaseLocalization):
    # ---- WELCOME ----
    def help_message(self):
        return (
            f"–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∫—Ä—É–ø–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö —Å —Å–µ—Ç–∏ {link(self.kylin_LINK, 'kylin')}.\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"/help ‚Äì —ç—Ç–∞ –ø–æ–º–æ—â—å\n"
            f"/start ‚Äì –∑–∞–ø—É—Å–∫ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            f"/lang ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n"
            f"/cap ‚Äì —Ç–µ–∫—É—â–∏–π –∫–∞–ø –¥–ª—è —Å—Ç–µ–π–∫–∞ –≤ –ø—É–ª–∞—Ö Chaosnet\n"
            f"/price ‚Äì —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {self.R}.\n"
            f"<b>‚ö†Ô∏è –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ @kylin_alert!</b>\n"
            f"ü§ó –û—Ç–∑—ã–≤—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {CREATOR_TG}."
        )

    def welcome_message(self, info: ThorInfo):
        return (
            f"–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ kylin –∏ —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –≤ –ø—É–ª—ã.\n"
            f"–¶–µ–Ω–∞ {self.R} —Å–µ–π—á–∞—Å <code>{info.price:.3f} BUSD</code>.\n"
            f"<b>‚ö†Ô∏è –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ @kylin_alert!</b>\n"
            f"–ù–∞–±–µ—Ä–∏ /help, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
            f"ü§ó –û—Ç–∑—ã–≤—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {CREATOR_TG}."
        )

    def unknown_command(self):
        return (
            "üôÑ –ò–∑–≤–∏–Ω–∏, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–∂–º–∏ –Ω–∞ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
        )

    # ----- MAIN MENU ------

    BUTTON_MM_MY_ADDRESS = 'üè¶ –ú–æ–∏ –∞–¥—Ä–µ—Å–∞'
    BUTTON_MM_METRICS = 'üìê –ú–µ—Ç—Ä–∏–∫–∏'
    BUTTON_MM_SETTINGS = f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'
    BUTTON_MM_MAKE_AVATAR = f'ü¶π‚ÄçÔ∏èÔ∏è –°–¥–µ–ª–∞–π –∞–≤—É'

    # ------ STAKE INFO -----

    BUTTON_SM_ADD_ADDRESS = '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å'
    BUTTON_BACK = 'üîô –ù–∞–∑–∞–¥'
    BUTTON_SM_BACK_TO_LIST = 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥—Ä–µ—Å–∞–º'
    BUTTON_SM_BACK_MM = 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'

    BUTTON_SM_SUMMARY = 'üí≤ –°–≤–æ–¥–∫–∞'

    BUTTON_VIEW_RUNESTAKEINFO = 'üåé –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ runestake.info'
    BUTTON_VIEW_VALUE_ON = '–°–∫—Ä—ã—Ç—å –¥–µ–Ω—å–≥–∏: –ù–ï–¢'
    BUTTON_VIEW_VALUE_OFF = '–°–∫—Ä—ã—Ç—å –¥–µ–Ω—å–≥–∏: –î–ê'
    BUTTON_REMOVE_THIS_ADDRESS = '‚ùå –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å—Å'

    TEXT_NO_ADDRESSES = "üîÜ –í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤. –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∞–¥—Ä–µ—Å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å."
    TEXT_YOUR_ADDRESSES = 'üîÜ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∞–¥—Ä–µ—Å–∞:'
    TEXT_INVALID_ADDRESS = code('‚õîÔ∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∞–¥—Ä–µ—Å–∞!')
    TEXT_SELECT_ADDRESS_ABOVE = '–í—ã–±–µ—Ä–∏ –∞–¥—Ä–µ—Å –≤—ã—à–µ ‚òùÔ∏è '
    TEXT_SELECT_ADDRESS_SEND_ME = '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å, –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ –º–Ω–µ üëá'
    TEXT_LP_NO_POOLS_FOR_THIS_ADDRESS = 'üì™ <b>–ù–∞ —ç—Ç–æ–º –∞–¥—Ä–µ—Å–µ –Ω–µ—Ç –ø—É–ª–æ–≤ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏.</b> ' \
                                        '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π.'
    TEXT_LP_IMG_CAPTION = f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {link(BaseLocalization.START_ME, "@kylin_monitoring_bot")}'

    LP_PIC_POOL = '–ü–£–õ'
    LP_PIC_RUNE = 'RUNE'
    LP_PIC_ADDED = '–î–æ–±–∞–≤–ª–µ–Ω–æ'
    LP_PIC_WITHDRAWN = '–í—ã–≤–µ–¥–µ–Ω–æ'
    LP_PIC_REDEEM = '–ú–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å'
    LP_PIC_GAIN_LOSS = '–î–æ—Ö–æ–¥ / —É–±—ã—Ç–æ–∫'
    LP_PIC_IN_USD = '–≤ USD'
    LP_PIC_R_RUNE = f'{RAIDO_GLYPH}une'
    LP_PIC_ADDED_VALUE = '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Å–µ–≥–æ'
    LP_PIC_WITHDRAWN_VALUE = '–í—ã–≤–µ–¥–µ–Ω–æ –≤—Å–µ–≥–æ'
    LP_PIC_CURRENT_VALUE = '–û—Å—Ç–∞–ª–æ—Å—å –≤ –ø—É–ª–µ'
    LP_PIC_PRICE_CHANGE = '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã'
    LP_PIC_PRICE_CHANGE_2 = '—Å –º–æ–º–µ–Ω—Ç–∞ 1–≥–æ —Å—Ç–µ–π–∫–∞'
    LP_PIC_LP_VS_HOLD = '–ü—Ä–æ—Ç–∏–≤ –•–û–õ–î'
    LP_PIC_LP_APY = '–ì–æ–¥–æ–≤—ã—Ö'
    LP_PIC_EARLY = '–ï—â–µ —Ä–∞–Ω–æ...'
    LP_PIC_FOOTER = "–ò—Å–ø–æ–ª—å—É–µ—Ç runestake.info –æ—Ç Bigboss"

    LP_PIC_SUMMARY_HEADER = '–°–≤–æ–¥–∫–∞ –ø–æ –ø—É–ª–∞–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏'
    LP_PIC_SUMMARY_ADDED_VALUE = '–î–æ–±–∞–≤–ª–µ–Ω–æ'
    LP_PIC_SUMMARY_WITHDRAWN_VALUE = '–í—ã–≤–µ–¥–µ–Ω–æ'
    LP_PIC_SUMMARY_CURRENT_VALUE = '–°–µ–π—á–∞—Å –≤ –ø—É–ª–µ'
    LP_PIC_SUMMARY_TOTAL_GAIN_LOSS = '–î–æ—Ö–æ–¥/—É–±—ã—Ç–æ–∫'
    LP_PIC_SUMMARY_TOTAL_GAIN_LOSS_PERCENT = '–î–æ—Ö–æ–¥/—É–±—ã—Ç–æ–∫ %'
    LP_PIC_SUMMARY_AS_IF_IN_RUNE = f'–ï—Å–ª–∏ –≤—Å–µ –≤ {RAIDO_GLYPH}'
    LP_PIC_SUMMARY_AS_IF_IN_USD = '–ï—Å–ª–∏ –≤—Å–µ –≤ $'
    LP_PIC_SUMMARY_TOTAL_LP_VS_HOLD = '–ò—Ç–æ–≥–æ —Ö–æ–ª–¥ –ø—Ä–æ—Ç–∏–≤ –ø—É–ª–æ–≤, $'

    def pic_stake_days(self, total_days, first_stake_ts):
        start_date = datetime.fromtimestamp(first_stake_ts).strftime('%d.%m.%Y')
        return f'{ceil(total_days)} –¥–Ω. ({start_date})'

    def text_stake_loading_pools(self, address):
        return f'‚è≥ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.</b>\n' \
               f'–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –ø—É–ª–æ–≤ –¥–ª—è –∞–¥—Ä–µ—Å–∞ {pre(address)}...\n' \
               f'–ò–Ω–æ–≥–¥–∞ –æ–Ω–∞ –º–æ–∂–µ—Ç –∏–¥—Ç–∏ –¥–æ–ª–≥–æ, –µ—Å–ª–∏ Midgard —Å–∏–ª—å–Ω–æ –Ω–∞–≥—Ä—É–∂–µ–Ω.'

    def text_stake_provides_liq_to_pools(self, address, pools):
        pools = pre(', '.join(pools))
        thor_tx = link(self.thor_explore_address(address), 'viewblock.io')
        bnb_tx = link(self.binance_explore_address(address), 'explorer.binance.org')
        return f'üõ≥Ô∏è {pre(address)}\n' \
               f'–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–ª—ã:\n{pools}.\n\n' \
               f"üîç Explorers: {thor_tx}; {bnb_tx}.\n\n" \
               f'üëá –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏.'

    def text_stake_today(self):
        today = datetime.now().strftime('%d.%m.%Y')
        return f'–°–µ–≥–æ–¥–Ω—è: {today}'

    # ----- CAP ------
    def notification_text_cap_change(self, old: ThorInfo, new: ThorInfo):
        verb = "–ø–æ–¥—Ä–æ—Å" if old.cap < new.cap else "—É–ø–∞–ª"
        call = "–ê–π-–¥–∞ –∑–∞—Å—Ç–µ–π–∫–∞–µ–º!\n" if new.cap > old.cap else ''
        return (
            f'<b>–ö–∞–ø {verb} —Å {pretty_money(old.cap)} –¥–æ {pretty_money(new.cap)}!</b>\n'
            f'–°–µ–π—á–∞—Å –≤ –ø—É–ª—ã –ø–æ–º–µ—â–µ–Ω–æ <b>{pretty_money(new.stacked)}</b> {self.R}.\n'
            f"{self._cap_progress_bar(new)}"
            f'–¶–µ–Ω–∞ {self.R} –≤ –ø—É–ª–µ <code>{new.price:.3f} BUSD</code>.\n'
            f'{call}'
            f'https://chaosnet.bepswap.com/'
        )

    # ------ PRICE -------

    PRICE_GRAPH_TITLE = f'–¶–µ–Ω–∞ {RAIDO_GLYPH}—É–Ω—ã'
    PRICE_GRAPH_LEGEND_DET_PRICE = '–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç—Å–∫–∞—è —Ü–µ–Ω–∞'
    PRICE_GRAPH_LEGEND_ACTUAL_PRICE = '–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞'

    def price_message(self, info: ThorInfo, fair_price: RuneFairPrice):
        return (
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ {self.R}: <code>{info.price:.3f} BUSD</code>.\n"
            f"–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ {self.R} —Å–µ–π—á–∞—Å: <code>${fair_price.fair_price:.3f}</code>."
        )

    # ------ TXS -------
    def notification_text_large_tx(self, tx: StakeTx, dollar_per_rune: float, pool: StakePoolStats,
                                   pool_info: PoolInfo):
        msg = ''
        if tx.type == 'stake':
            msg += f'üê≥ <b>–ö–∏—Ç –¥–æ–±–∞–≤–∏–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏</b> üü¢\n'
        elif tx.type == 'unstake':
            msg += f'üê≥ <b>–ö–∏—Ç –≤—ã–≤–µ–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å</b> üî¥\n'

        rp, ap = tx.symmetry_rune_vs_asset()
        total_usd_volume = tx.full_rune * dollar_per_rune if dollar_per_rune != 0 else 0.0
        pool_depth_usd = pool_info.usd_depth(dollar_per_rune)
        thor_tx = link(self.thor_explore_address(tx.address), short_address(tx.address))
        bnb_tx = link(self.binance_explore_address(tx.address), short_address(tx.address))
        percent_of_pool = pool_info.percent_share(tx.full_rune)

        return (
            f"<b>{pretty_money(tx.rune_amount)} {self.R}</b> ({rp:.0f}%) ‚ÜîÔ∏è "
            f"<b>{pretty_money(tx.asset_amount)} {short_asset_name(tx.pool)}</b> ({ap:.0f}%)\n"
            f"–í—Å–µ–≥–æ: <code>${pretty_money(total_usd_volume)}</code> ({percent_of_pool:.2f}% –æ—Ç –≤—Å–µ–≥–æ –ø—É–ª–∞).\n"
            f"–ì–ª—É–±–∏–Ω–∞ –ø—É–ª–∞ —Å–µ–π—á–∞—Å: <b>${pretty_money(pool_depth_usd)}</b>.\n"
            f"Thor –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å: {thor_tx} / Binance –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å: {bnb_tx}."
        )

    # ------- QUEUE -------

    def notification_text_queue_update(self, item_type, step, value):
        if step == 0:
            return f"‚ò∫Ô∏è –û—á–µ—Ä–µ–¥—å {item_type} —Å–Ω–æ–≤–∞ –æ–ø—É—Å—Ç–µ–ª–∞!"
        else:
            return f"ü§¨ <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –û—á–µ—Ä–µ–¥—å {code(item_type)} –∏–º–µ–µ—Ç {value} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!"

    # ------- PRICE -------

    def notification_text_price_update(self, p: PriceReport, ath=False):
        title = bold('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã') if not ath else bold('üöÄ –î–æ—Å—Ç–∏–≥–Ω—É—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º–∞–∫—Å–∏–º—É–º!')

        c_gecko_url = 'https://www.coingecko.com/ru/' \
                      '%D0%9A%D1%80%D0%B8%D0%BF%D1%82%D0%BE%D0%B2%D0%B0%D0%BB%D1%8E%D1%82%D1%8B/kylin'
        c_gecko_link = link(c_gecko_url, 'RUNE')

        message = f"{title} | {c_gecko_link}\n\n"
        price = p.fair_price.real_rune_price

        btc_price = f"‚Çø {p.btc_real_rune_price:.8f}"
        pr_text = f"${price:.2f}"
        message += f"–¶–µ–Ω–∞ <b>RUNE</b> —Å–µ–π—á–∞—Å {code(pr_text)} ({btc_price}).\n"

        last_ath = p.last_ath
        if last_ath is not None and ath:
            message += f"–ü–æ—Å–ª–µ–¥–Ω–∏–π ATH –±—ã–ª ${last_ath.ath_price:2.f} ({format_time_ago(last_ath.ath_date)}).\n"

        time_combos = zip(
            ('1—á.', '24—á.', '7–¥–Ω.'),
            (p.price_1h, p.price_24h, p.price_7d)
        )
        for title, old_price in time_combos:
            if old_price:
                pc = calc_percent_change(old_price, price)
                message += pre(f"{title.rjust(5)}:{adaptive_round_to_str(pc, True).rjust(8)} % "
                               f"{emoji_for_percent_change(pc).ljust(4).rjust(6)}") + "\n"

        fp = p.fair_price
        if fp.rank >= 1:
            message += f"–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {bold(pretty_dollar(fp.market_cap))} (#{bold(fp.rank)} –º–µ—Å—Ç–æ)\n"

        if fp.tlv_usd >= 1:
            message += (f"TLV (–∫—Ä–æ–º–µ RUNE): ${pre(pretty_money(fp.tlv_usd))}\n"
                        f"–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞: {code(pretty_money(fp.fair_price, prefix='$'))}\n"
                        f"–°–ø–µ–∫—É–ª—è—Ç–∏–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: {pre(x_ses(fp.fair_price, price))}\n")

        return message.rstrip()

    # ------- POOL CHURN -------

    def notification_text_pool_churn(self, added_pools, removed_pools, changed_status_pools):
        message = bold('üèä –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—É–ª–∞—Ö –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:') + '\n\n'

        statuses = {
            'Enabled': '–≤–∫–ª—é—á–µ–Ω',
            'Bootstrap': '–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è'
        }

        def pool_text(pool_name, status, to_status=None):
            t = link(self.pool_link(pool_name), pool_name)
            extra = '' if to_status is None else f' ‚Üí {ital(statuses[to_status])}'
            return f'{t} ({ital(statuses[status])}{extra})'

        if added_pools:
            message += '‚úÖ –ü—É–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: ' + ', '.join([pool_text(*a) for a in added_pools]) + '\n'
        if removed_pools:
            message += '‚ùå –ü—É–ª—ã —É–¥–∞–ª–µ–Ω—ã: ' + ', '.join([pool_text(*a) for a in removed_pools]) + '\n'
        if changed_status_pools:
            message += 'üîÑ –ü—É–ª—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å: ' + ', '.join([pool_text(*a) for a in changed_status_pools]) + '\n'

        return message.rstrip()

    # -------- SETTINGS --------

    BUTTON_SET_LANGUAGE = 'üåê –Ø–∑—ã–∫'
    TEXT_SETTING_INTRO = '<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö?'

    # -------- METRICS ----------

    BUTTON_METR_CAP = 'üìä –ö–∞–ø –ª–∏–≤–∫–∏–¥–Ω–æ—Å—Ç–∏'
    BUTTON_METR_PRICE = f'üí≤ {BaseLocalization.R} –∏–Ω—Ñ–æ –æ —Ü–µ–Ω–µ'
    BUTTON_METR_QUEUE = f'üë• –û—á–µ—Ä–µ–¥—å'

    TEXT_METRICS_INTRO = '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?'

    def cap_message(self, info: ThorInfo):
        return (
            f"<b>{pretty_money(info.stacked)}</b> –º–æ–Ω–µ—Ç –∏–∑ "
            f"<b>{pretty_money(info.cap)}</b> —Å–µ–π—á–∞—Å –∑–∞—Å—Ç–µ–π–∫–∞–Ω—ã.\n"
            f"{self._cap_progress_bar(info)}"
            f"–¶–µ–Ω–∞ {bold(self.R)} —Å–µ–π—á–∞—Å <code>{info.price:.3f} BUSD</code>.\n"
        )

    def queue_message(self, queue_info: QueueInfo):
        return (
                   f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–µ—Ä–µ–¥—è—Ö:</b>\n"
                   f"–ò—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (outbound): {code(queue_info.outbound)} —à—Ç.\n"
                   f"–û—á–µ—Ä–µ–¥—å –æ–±–º–µ–Ω–æ–≤ (swap): {code(queue_info.swap)} —à—Ç.\n"
               ) + (
                   f"–ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –º–Ω–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –≤–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –∑–∞–Ω—è—Ç—å –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–±—ã—á–Ω–æ."
                   if queue_info.is_full else ''
               )

    TEXT_PRICE_INFO_ASK_DURATION = '–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫?'

    BUTTON_1_HOUR = '1 —á–∞—Å–æ–≤'
    BUTTON_24_HOURS = '24 —á–∞—Å–∞'
    BUTTON_1_WEEK = '1 –Ω–µ–¥–µ–ª—è'
    BUTTON_30_DAYS = '30 –¥–Ω–µ–π'

    # ------- AVATAR -------

    TEXT_AVA_WELCOME = 'üñºÔ∏è –°–∫–∏–Ω—å –º–Ω–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —Ñ–æ—Ç–æ, –∏ —è —Å–¥–µ–ª–∞—é –¥–ª—è —Ç–µ–±—è –∞–≤–∞—Ç–∞—Ä –≤ —Å—Ç–∏–ª–µ kylin ' \
                       '—Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–π —Ä–∞–º–∫–æ–π.'

    TEXT_AVA_ERR_INVALID = '‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞!'
    TEXT_AVA_ERR_SQUARE = 'üñºÔ∏è –§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ!'
    TEXT_AVA_ERR_NO_PIC = '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–≤–æ–µ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è!'
    TEXT_AVA_READY = 'ü•≥ <b>–¢–≤–æ–π kylin –∞–≤–∞—Ç–∞—Ä –≥–æ—Ç–æ–≤!</b> ' \
                     '–°–∫–∞—á–∞–π —ç—Ç–æ —Ñ–æ—Ç–æ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.'

    BUTTON_AVA_FROM_MY_USERPIC = 'üòÄ –ò–∑ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è'
